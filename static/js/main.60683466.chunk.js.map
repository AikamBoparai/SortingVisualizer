{"version":3,"sources":["SortingAlgorithms/mergeSort.js","SortingAlgorithms/bubbleSort.js","SortingAlgorithms/quickSort.js","SortingAlgorithms/heapSort.js","SortingVisualizer/SortingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","helper","slice","mergeSort","start","end","middle","Math","floor","current","helperLeft","helperRight","push","merge","swap","firstIdx","secondIdx","temp","getQuickSortAnimations","quickSort","left","right","index","pivotIndex","pivot","partition","getHeapSortAnimations","last","i","heapDown","heapSort","arr","largest","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","props","state","this","resetArray","min","max","numBars","window","innerWidth","maxHeight","innerHeight","console","log","random","setState","resetColors","select","newBtn","document","getElementById","mergeBtn","quickBtn","heapBtn","bubbleBtn","disabled","toggleButtons","time","arrayBars","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","desc","barOne","barTwo","tempHeight","timedelay","counter","numSwaps","numRuns","getBubbleSortAnimations","className","map","value","idx","id","onClick","bubbleSort","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.60683466.chunk.js","sourcesContent":["export function getMergeSortAnimations(array){\r\n    const animations = [];\r\n    if(array.length <= 1) return array;\r\n    const helper = array.slice();\r\n    mergeSort(array,helper,0,array.length-1,animations);\r\n    return animations;\r\n}\r\n\r\n\r\nfunction mergeSort(array,helper,start,end,animations){\r\n    if(start < end){\r\n        const middle = Math.floor((start+end)/2);\r\n        mergeSort(helper,array,start,middle,animations);\r\n        mergeSort(helper,array,middle+1,end,animations);\r\n        merge(array,helper,start,middle,end,animations);\r\n    }\r\n    else{\r\n        return;\r\n    }\r\n}\r\n\r\nfunction merge(array,helper,start,middle,end,animations){\r\n    \r\n    let current = start;\r\n    let helperLeft = start;\r\n    let helperRight = middle + 1;\r\n    while (helperLeft <= middle && helperRight <= end) {\r\n        animations.push([helperLeft, helperRight]);\r\n        animations.push([helperLeft, helperRight]);\r\n        if (helper[helperLeft] <= helper[helperRight]) {\r\n        animations.push([current, helper[helperLeft]]);\r\n        array[current++] = helper[helperLeft++];\r\n        } else {\r\n        animations.push([current, helper[helperRight]]);\r\n        array[current++] = helper[helperRight++];\r\n        }\r\n    }\r\n    while (helperLeft <= middle) {\r\n        animations.push([helperLeft, helperLeft]);\r\n        animations.push([helperLeft, helperLeft]);\r\n        animations.push([current, helper[helperLeft]]);\r\n        array[current++] = helper[helperLeft++];\r\n    }\r\n    while (helperRight <= end) {\r\n        animations.push([helperRight, helperRight]);\r\n        animations.push([helperRight, helperRight]);\r\n        animations.push([current, helper[helperRight]]);\r\n        array[current++] = helper[helperRight++];\r\n    }\r\n}\r\n","export function getBubbleSortAnimations(array){\r\n    const animations = [];\r\n    let numSwaps;\r\n    let numRuns = 1;\r\n    do{\r\n        numSwaps = 0;\r\n        for(let i = 0; i < array.length -1; i++){\r\n            if(array[i] > array[i+1]){\r\n                animations.push([i,'swap']);\r\n                swap(array,i,i+1);\r\n                numSwaps++;\r\n            }\r\n        }\r\n        animations.push([0,'last']);\r\n        numRuns++;\r\n    }while(numSwaps != 0);\r\n\r\n    while(numRuns <= array.length){\r\n        animations.push([array.length-numRuns,'last']);\r\n        numRuns++;\r\n    }\r\n\r\n    return animations;\r\n}\r\nfunction swap(array,firstIdx,secondIdx){\r\n    const temp = array[firstIdx];\r\n    array[firstIdx] = array[secondIdx];\r\n    array[secondIdx] = temp;\r\n}","export function getQuickSortAnimations(array){\r\n    const animations = [];\r\n    quickSort(array,0,array.length-1,animations);\r\n    return animations;\r\n}\r\n\r\nfunction quickSort(array,left,right,animations){\r\n    let index = partition(array,left,right,animations);\r\n    if(left < index - 1){\r\n        quickSort(array,left,index-1,animations);\r\n    }\r\n    if(index < right){\r\n        quickSort(array,index,right,animations);\r\n    }\r\n}\r\n\r\nfunction partition(array,left,right,animations){\r\n    let pivotIndex = Math.floor((left+right)/2);\r\n    let pivot = array[pivotIndex];\r\n    animations.push([pivotIndex,pivotIndex,'pivotChange']);\r\n    while (left <= right){\r\n        while(pivot > array[left]){\r\n            left++;\r\n        }\r\n        while(pivot < array[right]){\r\n            right--;\r\n        }\r\n        if(left <= right){\r\n            animations.push([left,right,'swapColor']);\r\n            animations.push([left,right,'swap']);\r\n            swap(array,left,right);\r\n            left++;\r\n            right--;\r\n        }\r\n    }\r\n    animations.push([pivotIndex,pivotIndex,'pivotRevert']);\r\n    return left;\r\n}\r\n\r\nfunction swap(array,firstIdx,secondIdx){\r\n    const temp = array[firstIdx];\r\n    array[firstIdx] = array[secondIdx];\r\n    array[secondIdx] = temp;\r\n}","export function getHeapSortAnimations(array){\r\n    const animations = [];\r\n    heapSort(array,animations);\r\n    return animations;\r\n}\r\n\r\nfunction swap(array,firstIdx,secondIdx){\r\n    const temp = array[firstIdx];\r\n    array[firstIdx] = array[secondIdx];\r\n    array[secondIdx] = temp;\r\n}\r\n\r\nfunction heapSort(array,animations){\r\n    var last = array.length;\r\n    \r\n    for(var i = Math.floor(array.length/2); i >= 0; i--){\r\n        heapDown(array,array.length,i,animations);\r\n    }\r\n\r\n    for(i = array.length -1; i > 0; i--){\r\n        animations.push([0,i,'max']);\r\n        animations.push([0,i,'max']);\r\n        swap(array,0,i);\r\n        last--;\r\n        heapDown(array,last,0,animations);\r\n    }\r\n    animations.push([0,0,'max']);\r\n    animations.push([0,0,'max']);\r\n}\r\n\r\nfunction heapDown(arr, length, index,animations){\r\n    var largest = index;\r\n    var left = 2 * index + 1;\r\n    var right = 2 * index + 2;\r\n\r\n    if(left < length && arr[left] > arr[largest]){\r\n        largest = left;\r\n    }\r\n\r\n    if(right < length && arr[right] > arr[largest]){\r\n        largest = right;\r\n    }\r\n\r\n    if(largest != index){\r\n        animations.push([index,largest,'reg']);\r\n        animations.push([index,largest, 'reg']);\r\n        swap(arr,largest,index);\r\n        heapDown(arr,length,largest,animations);\r\n    }\r\n}","import React from 'react';\r\nimport './SortingVisualizer.css';\r\nimport {getMergeSortAnimations} from '../SortingAlgorithms/mergeSort.js';\r\nimport {getBubbleSortAnimations} from '../SortingAlgorithms/bubbleSort.js';\r\nimport {getQuickSortAnimations} from '../SortingAlgorithms/quickSort.js';\r\nimport {getHeapSortAnimations} from '../SortingAlgorithms/heapSort.js';\r\n\r\nconst PRIMARY_COLOR = '#778899';\r\nconst SECONDARY_COLOR = 'red';\r\nconst TERTIARY_COLOR = 'gold';\r\n\r\nvar animations = [];\r\n\r\nexport default class SortingVisualizer extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.resetArray();\r\n        animations = [];\r\n    }\r\n\r\n    resetArray(){\r\n        const array = [];\r\n        var numBars = window.innerWidth * 0.15;\r\n        var maxHeight = window.innerHeight * 0.85;\r\n        console.log(window.innerHeight);\r\n        for(let i = 0; i < numBars; i++){\r\n            array.push(randomIntInInterval(5,maxHeight));\r\n        }\r\n        animations = [];\r\n        this.setState({array});\r\n        this.resetColors();\r\n    }\r\n\r\n    toggleButtons(select){\r\n        const newBtn = document.getElementById('new-array-btn');\r\n        const mergeBtn = document.getElementById('merge-sort-btn');\r\n        const quickBtn = document.getElementById('quick-sort-btn');\r\n        const heapBtn = document.getElementById('heap-sort-btn');\r\n        const bubbleBtn = document.getElementById('bubble-sort-btn');\r\n        mergeBtn.disabled = select;\r\n        newBtn.disabled = select;\r\n        quickBtn.disabled = select;\r\n        heapBtn.disabled = select;\r\n        bubbleBtn.disabled = select;\r\n    }\r\n\r\n    mergeSort(){\r\n        this.toggleButtons(true);\r\n        var time = 0;\r\n        animations = getMergeSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        const isColorChange = i % 3 !== 2;\r\n        if (isColorChange) {\r\n            const [barOneIdx, barTwoIdx] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n            time = i * 4;\r\n            setTimeout(() => {\r\n            barOneStyle.backgroundColor = color;\r\n            barTwoStyle.backgroundColor = color;\r\n            }, i * 4);\r\n        } \r\n        else {\r\n                time = i * 4;\r\n                setTimeout(() => {\r\n                const [barOneIdx, newHeight] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                barOneStyle.height = `${newHeight}px`;\r\n                }, i * 4);\r\n            }\r\n        }\r\n        setTimeout(() => {\r\n            this.toggleButtons(false);\r\n        }, time);\r\n    }\r\n    quickSort(){\r\n        this.toggleButtons(true);\r\n        var time = 0;\r\n        animations = getQuickSortAnimations(this.state.array);\r\n        for(let i = 0; i < animations.length; i++){\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const[firstIdx,secondIdx,desc] = animations[i];\r\n            if(desc === 'pivotChange'){\r\n                time = i * 15;\r\n                setTimeout(() => {\r\n                    arrayBars[firstIdx].style.backgroundColor = TERTIARY_COLOR;\r\n                }, i * 15);\r\n            }\r\n            else if(desc === 'pivotRevert'){\r\n                time = i * 15;\r\n                setTimeout(() => {\r\n                    arrayBars[firstIdx].style.backgroundColor = PRIMARY_COLOR;\r\n                }, i * 15);\r\n            }\r\n            else if(desc === 'swapColor'){\r\n                time = i * 15;\r\n                const barOne = arrayBars[firstIdx];\r\n                const barTwo = arrayBars[secondIdx];\r\n                setTimeout(() => {\r\n                    barOne.style.backgroundColor = SECONDARY_COLOR;\r\n                    barTwo.style.backgroundColor = SECONDARY_COLOR;\r\n                }, i * 15);\r\n            }\r\n            else{\r\n                const barOne = arrayBars[firstIdx];\r\n                const barTwo = arrayBars[secondIdx];\r\n                time = i * 15;\r\n                setTimeout(() => {\r\n                    const tempHeight = barOne.style.height;\r\n                    barOne.style.height = barTwo.style.height;\r\n                    barTwo.style.height = tempHeight;\r\n                    barOne.style.backgroundColor = PRIMARY_COLOR;\r\n                    barTwo.style.backgroundColor = PRIMARY_COLOR;\r\n                }, i * 15);\r\n            }\r\n        }\r\n       \r\n        setTimeout(() => {\r\n            this.toggleButtons(false);\r\n        }, time); \r\n    }\r\n    heapSort(){\r\n        this.toggleButtons(true);\r\n        var time = 0;\r\n        var timedelay = window.innerWidth < 500 ? 15 : 5;\r\n        animations = getHeapSortAnimations(this.state.array);\r\n        let counter = 1;\r\n        for(let i = 0; i < animations.length; i++){\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const[firstIdx,secondIdx,desc] = animations[i];\r\n            const barOne = arrayBars[firstIdx];\r\n            const barTwo = arrayBars[secondIdx];\r\n            if(i % 2 == 0){\r\n                time = i* timedelay;\r\n                setTimeout(() => {\r\n                    barOne.style.backgroundColor = SECONDARY_COLOR;\r\n                    barTwo.style.backgroundColor = SECONDARY_COLOR;\r\n                    const tempHeight = barOne.style.height;\r\n                    barOne.style.height = barTwo.style.height;\r\n                    barTwo.style.height = tempHeight;\r\n                }, i * timedelay);\r\n            }\r\n            else{\r\n                time = i* timedelay;\r\n                setTimeout(() => {\r\n                    barOne.style.backgroundColor = PRIMARY_COLOR;\r\n                    barTwo.style.backgroundColor = PRIMARY_COLOR;\r\n                }, i * timedelay);\r\n            }\r\n\r\n            if(desc == 'max' && i %2 == 1){\r\n                time = i* timedelay;\r\n                setTimeout(() => {\r\n                    arrayBars[arrayBars.length - counter].style.backgroundColor = 'green';\r\n                    counter++;\r\n                }, i * timedelay);\r\n            }\r\n\r\n        }\r\n\r\n        setTimeout(() => {\r\n            this.toggleButtons(false);\r\n        }, time); \r\n       \r\n    }\r\n\r\n    resetColors(){\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        for(let i =0; i < arrayBars.length; i++){\r\n            arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\r\n        }\r\n    }\r\n    bubbleSort(){\r\n        this.toggleButtons(true);\r\n        var time = 0;\r\n        animations = getBubbleSortAnimations(this.state.array);\r\n        var timedelay = window.innerWidth < 500 ? 7 : 1;\r\n        let counter = 1;\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        for(let i =0; i < animations.length; i++){\r\n            const [barOneIdx,desc] = animations[i];\r\n            const barOne = arrayBars[barOneIdx];\r\n            const barTwo = arrayBars[barOneIdx+1];\r\n            time = i * timedelay;\r\n            if(desc == 'swap'){\r\n                setTimeout(() => {\r\n                    const tempHeight = barOne.style.height;\r\n                    barOne.style.height = barTwo.style.height;\r\n                    barTwo.style.height = tempHeight;\r\n                }, i * timedelay);\r\n            }\r\n            else{\r\n                time = i * timedelay;\r\n                setTimeout(() => {\r\n                    arrayBars[arrayBars.length - counter].style.backgroundColor = 'green';\r\n                    counter++;\r\n                }, i * timedelay);\r\n            }\r\n        }\r\n        setTimeout(() => {\r\n            this.toggleButtons(false);\r\n        }, time)\r\n    }\r\n\r\n    render(){\r\n        const {array} = this.state;\r\n\r\n        return(\r\n            <div className=\"array-container\">\r\n               {array.map((value,idx) =>(\r\n                   <div className = \"array-bar\" key={idx} style={{height:`${value}px`}}>\r\n                   </div>\r\n               ))}\r\n               <div>\r\n                <button id=\"new-array-btn\" onClick={() => this.resetArray()} >Generate New Array</button>\r\n                <button id=\"merge-sort-btn\" onClick={() => this.mergeSort()} >Merge Sort</button>\r\n                <button id=\"quick-sort-btn\" onClick={() => this.quickSort()} >Quick Sort</button>\r\n                <button id=\"heap-sort-btn\" onClick={() => this.heapSort()} >Heap Sort</button>\r\n                <button id=\"bubble-sort-btn\" onClick={() => this.bubbleSort()} >Bubble Sort</button>\r\n               </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction randomIntInInterval(min,max){\r\n    //inclusive of max and min\r\n    return Math.floor(Math.random() * (max - min + 1) + 1);\r\n}","import SortingVisualizer from './SortingVisualizer/SortingVisualizer';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <SortingVisualizer>\r\n        \r\n      </SortingVisualizer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}