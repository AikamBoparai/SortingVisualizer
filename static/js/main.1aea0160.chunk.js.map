{"version":3,"sources":["SortingAlgorithms/mergeSort.js","SortingAlgorithms/bubbleSort.js","SortingAlgorithms/quickSort.js","SortingAlgorithms/heapSort.js","SortingVisualizer/SortingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","helper","slice","mergeSort","start","end","middle","Math","floor","current","helperLeft","helperRight","push","merge","swap","firstIdx","secondIdx","temp","getQuickSortAnimations","quickSort","left","right","index","pivotIndex","pivot","partition","getHeapSortAnimations","last","i","heapDown","heapSort","arr","largest","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","resetColors","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","desc","barOne","barTwo","tempHeight","counter","numSwaps","numRuns","getBubbleSortAnimations","className","map","value","idx","onClick","bubbleSort","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1aea0160.chunk.js","sourcesContent":["export function getMergeSortAnimations(array){\r\n    const animations = [];\r\n    if(array.length <= 1) return array;\r\n    const helper = array.slice();\r\n    mergeSort(array,helper,0,array.length-1,animations);\r\n    return animations;\r\n}\r\n\r\n\r\nfunction mergeSort(array,helper,start,end,animations){\r\n    if(start < end){\r\n        const middle = Math.floor((start+end)/2);\r\n        mergeSort(helper,array,start,middle,animations);\r\n        mergeSort(helper,array,middle+1,end,animations);\r\n        merge(array,helper,start,middle,end,animations);\r\n    }\r\n    else{\r\n        return;\r\n    }\r\n}\r\n\r\nfunction merge(array,helper,start,middle,end,animations){\r\n    \r\n    let current = start;\r\n    let helperLeft = start;\r\n    let helperRight = middle + 1;\r\n    while (helperLeft <= middle && helperRight <= end) {\r\n        animations.push([helperLeft, helperRight]);\r\n        animations.push([helperLeft, helperRight]);\r\n        if (helper[helperLeft] <= helper[helperRight]) {\r\n        animations.push([current, helper[helperLeft]]);\r\n        array[current++] = helper[helperLeft++];\r\n        } else {\r\n        animations.push([current, helper[helperRight]]);\r\n        array[current++] = helper[helperRight++];\r\n        }\r\n    }\r\n    while (helperLeft <= middle) {\r\n        animations.push([helperLeft, helperLeft]);\r\n        animations.push([helperLeft, helperLeft]);\r\n        animations.push([current, helper[helperLeft]]);\r\n        array[current++] = helper[helperLeft++];\r\n    }\r\n    while (helperRight <= end) {\r\n        animations.push([helperRight, helperRight]);\r\n        animations.push([helperRight, helperRight]);\r\n        animations.push([current, helper[helperRight]]);\r\n        array[current++] = helper[helperRight++];\r\n    }\r\n}\r\n","export function getBubbleSortAnimations(array){\r\n    const animations = [];\r\n    let numSwaps;\r\n    let numRuns = 1;\r\n    do{\r\n        numSwaps = 0;\r\n        for(let i = 0; i < array.length -1; i++){\r\n            if(array[i] > array[i+1]){\r\n                animations.push([i,'swap']);\r\n                swap(array,i,i+1);\r\n                numSwaps++;\r\n            }\r\n        }\r\n        animations.push([0,'last']);\r\n        numRuns++;\r\n    }while(numSwaps != 0);\r\n\r\n    while(numRuns <= array.length){\r\n        animations.push([array.length-numRuns,'last']);\r\n        numRuns++;\r\n    }\r\n\r\n    return animations;\r\n}\r\nfunction swap(array,firstIdx,secondIdx){\r\n    const temp = array[firstIdx];\r\n    array[firstIdx] = array[secondIdx];\r\n    array[secondIdx] = temp;\r\n}","export function getQuickSortAnimations(array){\r\n    const animations = [];\r\n    quickSort(array,0,array.length-1,animations);\r\n    return animations;\r\n}\r\n\r\nfunction quickSort(array,left,right,animations){\r\n    let index = partition(array,left,right,animations);\r\n    if(left < index - 1){\r\n        quickSort(array,left,index-1,animations);\r\n    }\r\n    if(index < right){\r\n        quickSort(array,index,right,animations);\r\n    }\r\n}\r\n\r\nfunction partition(array,left,right,animations){\r\n    let pivotIndex = Math.floor((left+right)/2);\r\n    let pivot = array[pivotIndex];\r\n    animations.push([pivotIndex,pivotIndex,'pivotChange']);\r\n    while (left <= right){\r\n        while(pivot > array[left]){\r\n            left++;\r\n        }\r\n        while(pivot < array[right]){\r\n            right--;\r\n        }\r\n        if(left <= right){\r\n            animations.push([left,right,'swapColor']);\r\n            animations.push([left,right,'swap']);\r\n            swap(array,left,right);\r\n            left++;\r\n            right--;\r\n        }\r\n    }\r\n    animations.push([pivotIndex,pivotIndex,'pivotRevert']);\r\n    return left;\r\n}\r\n\r\nfunction swap(array,firstIdx,secondIdx){\r\n    const temp = array[firstIdx];\r\n    array[firstIdx] = array[secondIdx];\r\n    array[secondIdx] = temp;\r\n}","export function getHeapSortAnimations(array){\r\n    const animations = [];\r\n    heapSort(array,animations);\r\n    return animations;\r\n}\r\n\r\nfunction swap(array,firstIdx,secondIdx){\r\n    const temp = array[firstIdx];\r\n    array[firstIdx] = array[secondIdx];\r\n    array[secondIdx] = temp;\r\n}\r\n\r\nfunction heapSort(array,animations){\r\n    var last = array.length;\r\n    \r\n    for(var i = Math.floor(array.length/2); i >= 0; i--){\r\n        heapDown(array,array.length,i,animations);\r\n    }\r\n\r\n    for(i = array.length -1; i > 0; i--){\r\n        animations.push([0,i,'max']);\r\n        animations.push([0,i,'max']);\r\n        swap(array,0,i);\r\n        last--;\r\n        heapDown(array,last,0,animations);\r\n    }\r\n    animations.push([0,0,'max']);\r\n    animations.push([0,0,'max']);\r\n}\r\n\r\nfunction heapDown(arr, length, index,animations){\r\n    var largest = index;\r\n    var left = 2 * index + 1;\r\n    var right = 2 * index + 2;\r\n\r\n    if(left < length && arr[left] > arr[largest]){\r\n        largest = left;\r\n    }\r\n\r\n    if(right < length && arr[right] > arr[largest]){\r\n        largest = right;\r\n    }\r\n\r\n    if(largest != index){\r\n        animations.push([index,largest,'reg']);\r\n        animations.push([index,largest, 'reg']);\r\n        swap(arr,largest,index);\r\n        heapDown(arr,length,largest,animations);\r\n    }\r\n}","import React from 'react';\r\nimport './SortingVisualizer.css';\r\nimport {getMergeSortAnimations} from '../SortingAlgorithms/mergeSort.js';\r\nimport {getBubbleSortAnimations} from '../SortingAlgorithms/bubbleSort.js';\r\nimport {getQuickSortAnimations} from '../SortingAlgorithms/quickSort.js';\r\nimport {getHeapSortAnimations} from '../SortingAlgorithms/heapSort.js';\r\n\r\nconst PRIMARY_COLOR = '#778899';\r\nconst SECONDARY_COLOR = 'red';\r\nconst TERTIARY_COLOR = 'gold';\r\n\r\nexport default class SortingVisualizer extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray(){\r\n        const array = [];\r\n\r\n        for(let i = 0; i < 200; i++){\r\n            array.push(randomIntInInterval(5,850));\r\n        }\r\n        this.setState({array});\r\n        this.resetColors();\r\n    }\r\n\r\n    mergeSort(){\r\n        const animations = getMergeSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        const isColorChange = i % 3 !== 2;\r\n        if (isColorChange) {\r\n            const [barOneIdx, barTwoIdx] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n            setTimeout(() => {\r\n            barOneStyle.backgroundColor = color;\r\n            barTwoStyle.backgroundColor = color;\r\n            }, i * 5);\r\n        } \r\n        else {\r\n                setTimeout(() => {\r\n                const [barOneIdx, newHeight] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                barOneStyle.height = `${newHeight}px`;\r\n                }, i * 5);\r\n            }\r\n        }\r\n    }\r\n    quickSort(){\r\n        const animations = getQuickSortAnimations(this.state.array);\r\n        for(let i = 0; i < animations.length; i++){\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const[firstIdx,secondIdx,desc] = animations[i];\r\n            if(desc === 'pivotChange'){\r\n                setTimeout(() => {\r\n                    arrayBars[firstIdx].style.backgroundColor = TERTIARY_COLOR;\r\n                }, i * 15);\r\n            }\r\n            else if(desc === 'pivotRevert'){\r\n                setTimeout(() => {\r\n                    arrayBars[firstIdx].style.backgroundColor = PRIMARY_COLOR;\r\n                }, i * 15);\r\n            }\r\n            else if(desc === 'swapColor'){\r\n                const barOne = arrayBars[firstIdx];\r\n                const barTwo = arrayBars[secondIdx];\r\n                setTimeout(() => {\r\n                    barOne.style.backgroundColor = SECONDARY_COLOR;\r\n                    barTwo.style.backgroundColor = SECONDARY_COLOR;\r\n                }, i * 15);\r\n            }\r\n            else{\r\n                const barOne = arrayBars[firstIdx];\r\n                const barTwo = arrayBars[secondIdx];\r\n                setTimeout(() => {\r\n                    const tempHeight = barOne.style.height;\r\n                    barOne.style.height = barTwo.style.height;\r\n                    barTwo.style.height = tempHeight;\r\n                }, i * 15);\r\n\r\n                setTimeout(() => {\r\n                    barOne.style.backgroundColor = PRIMARY_COLOR;\r\n                    barTwo.style.backgroundColor = PRIMARY_COLOR;\r\n                }, i * 15);\r\n            }\r\n        }\r\n    }\r\n    heapSort(){\r\n        const animations = getHeapSortAnimations(this.state.array);\r\n        let counter = 1;\r\n        for(let i = 0; i < animations.length; i++){\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const[firstIdx,secondIdx,desc] = animations[i];\r\n            const barOne = arrayBars[firstIdx];\r\n            const barTwo = arrayBars[secondIdx];\r\n            if(i % 2 == 0){\r\n                setTimeout(() => {\r\n                    barOne.style.backgroundColor = SECONDARY_COLOR;\r\n                    barTwo.style.backgroundColor = SECONDARY_COLOR;\r\n                    const tempHeight = barOne.style.height;\r\n                    barOne.style.height = barTwo.style.height;\r\n                    barTwo.style.height = tempHeight;\r\n                }, i * 15);\r\n            }\r\n            else{\r\n                setTimeout(() => {\r\n                    barOne.style.backgroundColor = PRIMARY_COLOR;\r\n                    barTwo.style.backgroundColor = PRIMARY_COLOR;\r\n                }, i * 15);\r\n            }\r\n\r\n            if(desc == 'max' && i %2 == 1){\r\n                setTimeout(() => {\r\n                    arrayBars[arrayBars.length - counter].style.backgroundColor = 'green';\r\n                    counter++;\r\n                }, i * 15);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    resetColors(){\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        for(let i =0; i < arrayBars.length; i++){\r\n            arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\r\n        }\r\n    }\r\n    bubbleSort(){\r\n        const animations = getBubbleSortAnimations(this.state.array);\r\n        let counter = 1;\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        for(let i =0; i < animations.length; i++){\r\n            const [barOneIdx,desc] = animations[i];\r\n            const barOne = arrayBars[barOneIdx];\r\n            const barTwo = arrayBars[barOneIdx+1];\r\n            if(desc == 'swap'){\r\n                setTimeout(() => {\r\n                    const tempHeight = barOne.style.height;\r\n                    barOne.style.height = barTwo.style.height;\r\n                    barTwo.style.height = tempHeight;\r\n                }, i * 5);\r\n            }\r\n            else{\r\n                setTimeout(() => {\r\n                    arrayBars[arrayBars.length - counter].style.backgroundColor = 'green';\r\n                    counter++;\r\n                }, i * 5);\r\n            }\r\n        }\r\n\r\n        \r\n\r\n    }\r\n\r\n    render(){\r\n        const {array} = this.state;\r\n\r\n        return(\r\n            <div className=\"array-container\">\r\n               {array.map((value,idx) =>(\r\n                   <div className = \"array-bar\" key={idx} style={{height:`${value}px`}}>\r\n                   </div>\r\n               ))}\r\n               <div>\r\n                <button className=\"new-array-btn\" onClick={() => this.resetArray()} >Generate New Array</button>\r\n                <button className=\"merge-sort-btn\" onClick={() => this.mergeSort()} >Merge Sort</button>\r\n                <button className=\"quick-sort-btn\" onClick={() => this.quickSort()} >Quick Sort</button>\r\n                <button className=\"heap-sort-btn\" onClick={() => this.heapSort()} >Heap Sort</button>\r\n                <button className=\"bubble-sort-btn\" onClick={() => this.bubbleSort()} >Bubble Sort</button>\r\n               </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction randomIntInInterval(min,max){\r\n    //inclusive of max and min\r\n    return Math.floor(Math.random() * (max - min + 1) + 1);\r\n}","import SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer>\n        \n      </SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}