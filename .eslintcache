[{"C:\\Code\\SortingVisualizer\\src\\index.js":"1","C:\\Code\\SortingVisualizer\\src\\reportWebVitals.js":"2","C:\\Code\\SortingVisualizer\\src\\App.js":"3","C:\\Code\\SortingVisualizer\\src\\SortingVisualizer\\SortingVisualizer.jsx":"4","C:\\Code\\SortingVisualizer\\src\\SortingAlgorithms\\mergeSort.js":"5","C:\\Code\\SortingVisualizer\\src\\SortingAlgorithms\\bubbleSort.js":"6","C:\\Code\\SortingVisualizer\\src\\SortingAlgorithms\\quickSort.js":"7","C:\\Code\\SortingVisualizer\\src\\SortingAlgorithms\\heapSort.js":"8"},{"size":517,"mtime":1613375713240,"results":"9","hashOfConfig":"10"},{"size":375,"mtime":1613375713243,"results":"11","hashOfConfig":"10"},{"size":261,"mtime":1613375713223,"results":"12","hashOfConfig":"10"},{"size":7170,"mtime":1613375713238,"results":"13","hashOfConfig":"10"},{"size":1735,"mtime":1613375713228,"results":"14","hashOfConfig":"10"},{"size":765,"mtime":1613375713225,"results":"15","hashOfConfig":"10"},{"size":1265,"mtime":1613375713234,"results":"16","hashOfConfig":"10"},{"size":1309,"mtime":1613375713226,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"m6il1b",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"20"},"C:\\Code\\SortingVisualizer\\src\\index.js",[],["38","39"],"C:\\Code\\SortingVisualizer\\src\\reportWebVitals.js",[],"C:\\Code\\SortingVisualizer\\src\\App.js",[],"C:\\Code\\SortingVisualizer\\src\\SortingVisualizer\\SortingVisualizer.jsx",["40","41","42","43","44","45"],"import React from 'react';\r\nimport './SortingVisualizer.css';\r\nimport {getMergeSortAnimations} from '../SortingAlgorithms/mergeSort.js';\r\nimport {getBubbleSortAnimations} from '../SortingAlgorithms/bubbleSort.js';\r\nimport {getQuickSortAnimations} from '../SortingAlgorithms/quickSort.js';\r\nimport {getHeapSortAnimations} from '../SortingAlgorithms/heapSort.js';\r\n\r\nconst PRIMARY_COLOR = '#778899';\r\nconst SECONDARY_COLOR = 'red';\r\nconst TERTIARY_COLOR = 'gold';\r\n\r\nexport default class SortingVisualizer extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray(){\r\n        const array = [];\r\n\r\n        for(let i = 0; i < 200; i++){\r\n            array.push(randomIntInInterval(5,850));\r\n        }\r\n        this.setState({array});\r\n        this.resetColors();\r\n    }\r\n\r\n    mergeSort(){\r\n        const animations = getMergeSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        const isColorChange = i % 3 !== 2;\r\n        if (isColorChange) {\r\n            const [barOneIdx, barTwoIdx] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n            setTimeout(() => {\r\n            barOneStyle.backgroundColor = color;\r\n            barTwoStyle.backgroundColor = color;\r\n            }, i * 5);\r\n        } \r\n        else {\r\n                setTimeout(() => {\r\n                const [barOneIdx, newHeight] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                barOneStyle.height = `${newHeight}px`;\r\n                }, i * 5);\r\n            }\r\n        }\r\n    }\r\n    quickSort(){\r\n        const animations = getQuickSortAnimations(this.state.array);\r\n        for(let i = 0; i < animations.length; i++){\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const[firstIdx,secondIdx,desc] = animations[i];\r\n            if(desc === 'pivotChange'){\r\n                setTimeout(() => {\r\n                    arrayBars[firstIdx].style.backgroundColor = TERTIARY_COLOR;\r\n                }, i * 15);\r\n            }\r\n            else if(desc === 'pivotRevert'){\r\n                setTimeout(() => {\r\n                    arrayBars[firstIdx].style.backgroundColor = PRIMARY_COLOR;\r\n                }, i * 15);\r\n            }\r\n            else if(desc === 'swapColor'){\r\n                const barOne = arrayBars[firstIdx];\r\n                const barTwo = arrayBars[secondIdx];\r\n                setTimeout(() => {\r\n                    barOne.style.backgroundColor = SECONDARY_COLOR;\r\n                    barTwo.style.backgroundColor = SECONDARY_COLOR;\r\n                }, i * 15);\r\n            }\r\n            else{\r\n                const barOne = arrayBars[firstIdx];\r\n                const barTwo = arrayBars[secondIdx];\r\n                setTimeout(() => {\r\n                    const tempHeight = barOne.style.height;\r\n                    barOne.style.height = barTwo.style.height;\r\n                    barTwo.style.height = tempHeight;\r\n                }, i * 15);\r\n\r\n                setTimeout(() => {\r\n                    barOne.style.backgroundColor = PRIMARY_COLOR;\r\n                    barTwo.style.backgroundColor = PRIMARY_COLOR;\r\n                }, i * 15);\r\n            }\r\n        }\r\n    }\r\n    heapSort(){\r\n        const animations = getHeapSortAnimations(this.state.array);\r\n        let counter = 1;\r\n        for(let i = 0; i < animations.length; i++){\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const[firstIdx,secondIdx,desc] = animations[i];\r\n            const barOne = arrayBars[firstIdx];\r\n            const barTwo = arrayBars[secondIdx];\r\n            if(i % 2 == 0){\r\n                setTimeout(() => {\r\n                    barOne.style.backgroundColor = SECONDARY_COLOR;\r\n                    barTwo.style.backgroundColor = SECONDARY_COLOR;\r\n                    const tempHeight = barOne.style.height;\r\n                    barOne.style.height = barTwo.style.height;\r\n                    barTwo.style.height = tempHeight;\r\n                }, i * 15);\r\n            }\r\n            else{\r\n                setTimeout(() => {\r\n                    barOne.style.backgroundColor = PRIMARY_COLOR;\r\n                    barTwo.style.backgroundColor = PRIMARY_COLOR;\r\n                }, i * 15);\r\n            }\r\n\r\n            if(desc == 'max' && i %2 == 1){\r\n                setTimeout(() => {\r\n                    arrayBars[arrayBars.length - counter].style.backgroundColor = 'green';\r\n                    counter++;\r\n                }, i * 15);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    resetColors(){\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        for(let i =0; i < arrayBars.length; i++){\r\n            arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\r\n        }\r\n    }\r\n    bubbleSort(){\r\n        const animations = getBubbleSortAnimations(this.state.array);\r\n        let counter = 1;\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        for(let i =0; i < animations.length; i++){\r\n            const [barOneIdx,desc] = animations[i];\r\n            const barOne = arrayBars[barOneIdx];\r\n            const barTwo = arrayBars[barOneIdx+1];\r\n            if(desc == 'swap'){\r\n                setTimeout(() => {\r\n                    const tempHeight = barOne.style.height;\r\n                    barOne.style.height = barTwo.style.height;\r\n                    barTwo.style.height = tempHeight;\r\n                }, i * 5);\r\n            }\r\n            else{\r\n                setTimeout(() => {\r\n                    arrayBars[arrayBars.length - counter].style.backgroundColor = 'green';\r\n                    counter++;\r\n                }, i * 5);\r\n            }\r\n        }\r\n\r\n        \r\n\r\n    }\r\n\r\n    render(){\r\n        const {array} = this.state;\r\n\r\n        return(\r\n            <div className=\"array-container\">\r\n               {array.map((value,idx) =>(\r\n                   <div className = \"array-bar\" key={idx} style={{height:`${value}px`}}>\r\n                   </div>\r\n               ))}\r\n               <div>\r\n                <button className=\"new-array-btn\" onClick={() => this.resetArray()} >Generate New Array</button>\r\n                <button className=\"merge-sort-btn\" onClick={() => this.mergeSort()} >Merge Sort</button>\r\n                <button className=\"quick-sort-btn\" onClick={() => this.quickSort()} >Quick Sort</button>\r\n                <button className=\"heap-sort-btn\" onClick={() => this.heapSort()} >Heap Sort</button>\r\n                <button className=\"bubble-sort-btn\" onClick={() => this.bubbleSort()} >Bubble Sort</button>\r\n               </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction randomIntInInterval(min,max){\r\n    //inclusive of max and min\r\n    return Math.floor(Math.random() * (max - min + 1) + 1);\r\n}","C:\\Code\\SortingVisualizer\\src\\SortingAlgorithms\\mergeSort.js",[],"C:\\Code\\SortingVisualizer\\src\\SortingAlgorithms\\bubbleSort.js",["46"],"export function getBubbleSortAnimations(array){\r\n    const animations = [];\r\n    let numSwaps;\r\n    let numRuns = 1;\r\n    do{\r\n        numSwaps = 0;\r\n        for(let i = 0; i < array.length -1; i++){\r\n            if(array[i] > array[i+1]){\r\n                animations.push([i,'swap']);\r\n                swap(array,i,i+1);\r\n                numSwaps++;\r\n            }\r\n        }\r\n        animations.push([0,'last']);\r\n        numRuns++;\r\n    }while(numSwaps != 0);\r\n\r\n    while(numRuns <= array.length){\r\n        animations.push([array.length-numRuns,'last']);\r\n        numRuns++;\r\n    }\r\n\r\n    return animations;\r\n}\r\nfunction swap(array,firstIdx,secondIdx){\r\n    const temp = array[firstIdx];\r\n    array[firstIdx] = array[secondIdx];\r\n    array[secondIdx] = temp;\r\n}","C:\\Code\\SortingVisualizer\\src\\SortingAlgorithms\\quickSort.js",[],"C:\\Code\\SortingVisualizer\\src\\SortingAlgorithms\\heapSort.js",["47"],"export function getHeapSortAnimations(array){\r\n    const animations = [];\r\n    heapSort(array,animations);\r\n    return animations;\r\n}\r\n\r\nfunction swap(array,firstIdx,secondIdx){\r\n    const temp = array[firstIdx];\r\n    array[firstIdx] = array[secondIdx];\r\n    array[secondIdx] = temp;\r\n}\r\n\r\nfunction heapSort(array,animations){\r\n    var last = array.length;\r\n    \r\n    for(var i = Math.floor(array.length/2); i >= 0; i--){\r\n        heapDown(array,array.length,i,animations);\r\n    }\r\n\r\n    for(i = array.length -1; i > 0; i--){\r\n        animations.push([0,i,'max']);\r\n        animations.push([0,i,'max']);\r\n        swap(array,0,i);\r\n        last--;\r\n        heapDown(array,last,0,animations);\r\n    }\r\n    animations.push([0,0,'max']);\r\n    animations.push([0,0,'max']);\r\n}\r\n\r\nfunction heapDown(arr, length, index,animations){\r\n    var largest = index;\r\n    var left = 2 * index + 1;\r\n    var right = 2 * index + 2;\r\n\r\n    if(left < length && arr[left] > arr[largest]){\r\n        largest = left;\r\n    }\r\n\r\n    if(right < length && arr[right] > arr[largest]){\r\n        largest = right;\r\n    }\r\n\r\n    if(largest != index){\r\n        animations.push([index,largest,'reg']);\r\n        animations.push([index,largest, 'reg']);\r\n        swap(arr,largest,index);\r\n        heapDown(arr,length,largest,animations);\r\n    }\r\n}",{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":106,"column":22,"nodeType":"54","messageId":"55","endLine":106,"endColumn":24},{"ruleId":"52","severity":1,"message":"53","line":122,"column":21,"nodeType":"54","messageId":"55","endLine":122,"endColumn":23},{"ruleId":"52","severity":1,"message":"53","line":122,"column":38,"nodeType":"54","messageId":"55","endLine":122,"endColumn":40},{"ruleId":"56","severity":1,"message":"57","line":123,"column":28,"nodeType":"58","messageId":"59","endLine":126,"endColumn":18},{"ruleId":"52","severity":1,"message":"53","line":146,"column":21,"nodeType":"54","messageId":"55","endLine":146,"endColumn":23},{"ruleId":"56","severity":1,"message":"57","line":154,"column":28,"nodeType":"58","messageId":"59","endLine":157,"endColumn":18},{"ruleId":"52","severity":1,"message":"60","line":16,"column":21,"nodeType":"54","messageId":"55","endLine":16,"endColumn":23},{"ruleId":"52","severity":1,"message":"60","line":44,"column":16,"nodeType":"54","messageId":"55","endLine":44,"endColumn":18},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'counter', 'counter'.","ArrowFunctionExpression","unsafeRefs","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]