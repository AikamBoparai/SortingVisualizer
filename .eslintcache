[{"C:\\Code\\SortingVisualizer\\src\\index.js":"1","C:\\Code\\SortingVisualizer\\src\\reportWebVitals.js":"2","C:\\Code\\SortingVisualizer\\src\\App.js":"3","C:\\Code\\SortingVisualizer\\src\\SortingVisualizer\\SortingVisualizer.jsx":"4","C:\\Code\\SortingVisualizer\\src\\SortingAlgorithms\\sortingAlgorithms.js":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"7"},{"size":247,"mtime":1610340556771,"results":"9","hashOfConfig":"7"},{"size":5813,"mtime":1610858251450,"results":"10","hashOfConfig":"7"},{"size":3618,"mtime":1610857565121,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"lgawo7",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"14"},"C:\\Code\\SortingVisualizer\\src\\index.js",[],["24","25"],"C:\\Code\\SortingVisualizer\\src\\reportWebVitals.js",[],"C:\\Code\\SortingVisualizer\\src\\App.js",[],"C:\\Code\\SortingVisualizer\\src\\SortingVisualizer\\SortingVisualizer.jsx",["26","27"],"C:\\Code\\SortingVisualizer\\src\\SortingAlgorithms\\sortingAlgorithms.js",["28"],"export function getMergeSortAnimations(array){\r\n    const animations = [];\r\n    if(array.length <= 1) return array;\r\n    const helper = array.slice();\r\n    mergeSort(array,helper,0,array.length-1,animations);\r\n    return animations;\r\n}\r\n\r\nfunction swap(array,firstIdx,secondIdx){\r\n    const temp = array[firstIdx];\r\n    array[firstIdx] = array[secondIdx];\r\n    array[secondIdx] = temp;\r\n}\r\n\r\nfunction mergeSort(array,helper,start,end,animations){\r\n    if(start < end){\r\n        const middle = Math.floor((start+end)/2);\r\n        mergeSort(helper,array,start,middle,animations);\r\n        mergeSort(helper,array,middle+1,end,animations);\r\n        merge(array,helper,start,middle,end,animations);\r\n    }\r\n    else{\r\n        return;\r\n    }\r\n}\r\n\r\nfunction merge(array,helper,start,middle,end,animations){\r\n    \r\n    let current = start;\r\n    let helperLeft = start;\r\n    let helperRight = middle + 1;\r\n    while (helperLeft <= middle && helperRight <= end) {\r\n        animations.push([helperLeft, helperRight]);\r\n        animations.push([helperLeft, helperRight]);\r\n        if (helper[helperLeft] <= helper[helperRight]) {\r\n        animations.push([current, helper[helperLeft]]);\r\n        array[current++] = helper[helperLeft++];\r\n        } else {\r\n        animations.push([current, helper[helperRight]]);\r\n        array[current++] = helper[helperRight++];\r\n        }\r\n    }\r\n    while (helperLeft <= middle) {\r\n        animations.push([helperLeft, helperLeft]);\r\n        animations.push([helperLeft, helperLeft]);\r\n        animations.push([current, helper[helperLeft]]);\r\n        array[current++] = helper[helperLeft++];\r\n    }\r\n    while (helperRight <= end) {\r\n        animations.push([helperRight, helperRight]);\r\n        animations.push([helperRight, helperRight]);\r\n        animations.push([current, helper[helperRight]]);\r\n        array[current++] = helper[helperRight++];\r\n    }\r\n}\r\n\r\nexport function getBubbleSortAnimations(array){\r\n    const animations = [];\r\n    let numSwaps;\r\n    let numRuns = 1;\r\n    do{\r\n        numSwaps = 0;\r\n        for(let i = 0; i < array.length -1; i++){\r\n            if(array[i] > array[i+1]){\r\n                animations.push([i,'swap']);\r\n                swap(array,i,i+1);\r\n                numSwaps++;\r\n            }\r\n        }\r\n        animations.push([0,'last']);\r\n        numRuns++;\r\n    }while(numSwaps != 0);\r\n\r\n    while(numRuns <= array.length){\r\n        animations.push([array.length-numRuns,'last']);\r\n        numRuns++;\r\n    }\r\n\r\n    return animations;\r\n}\r\n\r\nexport function getQuickSortAnimations(array){\r\n    const animations = [];\r\n    quickSort(array,0,array.length-1,animations);\r\n    return animations;\r\n}\r\n\r\nfunction quickSort(array,left,right,animations){\r\n    let index = partition(array,left,right,animations);\r\n    if(left < index - 1){\r\n        quickSort(array,left,index-1,animations);\r\n    }\r\n    if(index < right){\r\n        quickSort(array,index,right,animations);\r\n    }\r\n}\r\n\r\nfunction partition(array,left,right,animations){\r\n    let pivotIndex = Math.floor((left+right)/2);\r\n    let pivot = array[pivotIndex];\r\n    animations.push([pivotIndex,pivotIndex,'pivotChange']);\r\n    while (left <= right){\r\n        while(pivot > array[left]){\r\n            left++;\r\n        }\r\n        while(pivot < array[right]){\r\n            right--;\r\n        }\r\n        if(left <= right){\r\n            animations.push([left,right,'swapColor']);\r\n            animations.push([left,right,'swap']);\r\n            swap(array,left,right);\r\n            left++;\r\n            right--;\r\n        }\r\n    }\r\n    animations.push([pivotIndex,pivotIndex,'pivotRevert']);\r\n    return left;\r\n}",{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":115,"column":21,"nodeType":"35","messageId":"36","endLine":115,"endColumn":23},{"ruleId":"37","severity":1,"message":"38","line":123,"column":28,"nodeType":"39","messageId":"40","endLine":126,"endColumn":18},{"ruleId":"33","severity":1,"message":"41","line":72,"column":21,"nodeType":"35","messageId":"36","endLine":72,"endColumn":23},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'counter', 'counter'.","ArrowFunctionExpression","unsafeRefs","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]